package com.maxcom.facturas.cfdi;

import java.io.BufferedReader;

import java.io.File;
import java.io.FileReader;

import java.util.ArrayList;

import java.util.List;

import org.tempuri.Cancelar;
import org.tempuri.OutputOfCancelar;

import org.apache.log4j.Logger;
// This source file is generated by Oracle tools.
// Contents may be subject to change.
// For reporting problems, use the following:
// Generated by Oracle JDeveloper 11g Release 2 11.1.2.2.0.6183

/*

INSERT INTO CFDI.cancelacion_cfdi_bitacora
(RFC, SERIE, FOLIO, NUM_INTENTOS, ESTATUS, COMENTARIOS, USU_REG, USU_MOD, FEC_REG, FEC_MOD) 
VALUES ('RFC', 'SERIE', FOLIO, NUM_INTENTOS, ESTATUS, 'COMENTARIOS', 'USU_REG', 'USU_MOD', 'FEC_REG', 'FEC_MOD');
s
SELECT ID_BITACORA, RFC, SERIE, FOLIO, NUM_INTENTOS, ESTATUS, COMENTARIOS, USU_REG, USU_MOD, FEC_REG, FEC_MOD 
FROM CFDI.cancelacion_cfdi_bitacora;

ALTER TABLE CFDI.cancelacion_cfdi_bitacora
  ADD UNIQUE INDEX cancelacion_cfdi_bitacora_idx_1 (RFC, SERIE, FOLIO);

INSERT INTO CFDI.cancelacion_cdfi_bitacora_detalle
(ID_BITACORA_DETALLE, ID_BITACORA, RESULTADO, ID_COMPROBANTE, ESTATUS, UUID, FECHA, ACUSE, ID_PROVEEDOR) 
VALUES (ID_BITACORA_DETALLE, ID_BITACORA, 'RESULTADO', ID_COMPROBANTE, ESTATUS, 'UUID', 'FECHA', 'ACUSE', ID_PROVEEDOR);

SELECT ID_BITACORA_DETALLE, ID_BITACORA, RESULTADO, ID_COMPROBANTE, ESTATUS, UUID, FECHA, ACUSE, ID_PROVEEDOR 
FROM CFDI.cancelacion_cdfi_bitacora_detalle;

UPDATE CFDI.cancelacion_cfdi_bitacora 
SET RFC = 'RFC' , SERIE = 'SERIE', FOLIO = FOLIO, NUM_INTENTOS = NUM_INTENTOS, ESTATUS = ESTATUS, COMENTARIOS = 'COMENTARIOS', USU_REG = 'USU_REG', USU_MOD = 'USU_MOD', FEC_REG = 'FEC_REG', FEC_MOD = 'FEC_MOD' 
WHERE -- Please complete
;




 */


public class CancelacionServiceSoapClient {

    public static Logger logger = Logger.getLogger(CancelacionServiceSoapClient.class);
    protected static List<Integer> lFolios = new ArrayList<Integer>();

    public static void main(String[] args) {
        logger.info(" - Inicia cancelacion de CFDIs...");

        CancelacionService cancelacionService = new CancelacionService();
        CancelacionServiceSoap cancelacionServiceSoap = cancelacionService.getCancelacionServiceSoap();
        // Add your code to call the desired methods.

        String rutaArchivoFolios = "", rfc = "", serie = "";
        //String rfc = "MTE960228KT0";
        //String serie = "MB";

        if (args != null && args.length == 3) {
            rfc = args[0];rfc = rfc.trim();
            serie = args[1];serie = serie.trim();
            rutaArchivoFolios = args[2];rutaArchivoFolios = rutaArchivoFolios.trim();
                                        
            logger.info("   - Informacion a procesar...");
            logger.info("       rfc:"+rfc);
            logger.info("       serie:"+serie);
            logger.info("       rutaArchivo:"+rutaArchivoFolios);
        } else {
            logger.error("      !!!ERROR: Se esperan tres parametros de entrada en el siguiente orden: rfc, serie y rutaArchivoDeFolios. Termina proceso.");
            logger.error("      Donde:");
            logger.error("          rfc: corresponde al RFC de Maxcom, por ejemplo MTE960228KT0");
            logger.error("          serie: MB -> Para comerciales, MBR -> Resienciales y MBH -> Alto volumen");
            logger.error("          rutaArchivoDeFolios: Ruta fisica del archivo plano que contiende los folios a cancelar, un folio por cada linea en el archivo.");
            System.exit(0);
        }
        
        validarSiexisteArchivo(rutaArchivoFolios);

        leerArchivoFolios(rutaArchivoFolios);

        if (lFolios.size() == 0) {
            logger.info("   - No hay folios para cancelar, termina proceso");
            System.exit(0);
        }else{
            logger.info("   - La cancelacion de CFDIs se solicitara al Webservice:");
            logger.info("       "+ cancelacionService.getWSDLDocumentLocation() );            
        }

        OutputOfCancelar respuesta = null;
        
        logger.info("");

        for (Integer folioFactura : lFolios) {

            logger.info("       - Solicitando cancelacion para:  rfc->" + rfc + ", serie->" + serie +", folio->" + folioFactura);

            respuesta = cancelacionServiceSoap.cancelarCFDI(rfc, serie, folioFactura);

            logger.info("           - Respuesta WS:");
            logger.info("               - Id:" + respuesta.getId());
            logger.info("               - Resultado:" + respuesta.getResultado());

            Cancelar cancelar = respuesta.getObjeto();
            logger.info("               - Cancelar:" + cancelar);
            
            if(cancelar!=null){                
                logger.info("                   cancelar.acuse:"+cancelar.getAcuse());
                logger.info("                   cancelar.estatus:"+cancelar.getEstatus());
                logger.info("                   cancelar.fecha:"+cancelar.getFecha());
                logger.info("                   cancelar.idComprobante:"+cancelar.getIdComprobante());
                logger.info("                   cancelar.idProveedor:"+cancelar.getIdProveedor());
                logger.info("                   cancelar.uuid:"+cancelar.getUuid());
            }
        }

        logger.info(" - Termina cancelacion de CFDIs...");

    }

    public static void leerArchivoFolios(String parmPath) {

        logger.info("   - Inicia extracción de folios del archivo, espere...");
        String item = "";
        int folioArchivo;
        try {
            BufferedReader bf = new BufferedReader(new FileReader(parmPath));
            while ((item = bf.readLine()) != null) {
                if (item.trim().length() > 0) {
                    folioArchivo = Integer.parseInt(item);

                    if (lFolios.contains(folioArchivo)) {
                        logger.info("       - Ya existe el folio " + folioArchivo + ", no se procesan duplicados");
                    } else {
                        lFolios.add(folioArchivo);
                    }
                }
            }
        } catch (Exception e) {
            logger.error("!!!ERROR: " + e.getMessage());
            e.printStackTrace();
            System.exit(0);
        }
        logger.info("       - *El numero de folios a procesar es de: " + lFolios.size());
        logger.info("   - Termina extracción de folios del archivo, espere...");
    }

    public static void validarSiexisteArchivo(String parmRuta) {
        logger.info("   - Validando la existencia del archivo...");
        String sFichero = parmRuta;
        File fichero = new File(sFichero);

        if (fichero.exists()) {
            logger.info("       OK: El Archivo si existe en la ruta: " + parmRuta);
        } else {
            logger.error("      ERROR: EL Archivo no existe en la ruta: " + parmRuta + ", termina proceso.");
            System.exit(0);
        }
    }

}
